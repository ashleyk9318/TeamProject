// Team 6
// Neesha B, Daksha D, Viktoriia P, Jane S, Ashley K
// CIS 22C Fall 14

#ifndef _HASHED_TABLE
#define _HASHED_TABLE

#include "LinkedList.h"
#include "School.h"
#include <cmath>
#include <string>
#include <fstream>

#define LOAD_FACTOR 75

class HashedTable
{
	private:
		int arraySize;

		LinkedList<SchoolPtrContainer>* hashTable;
		int getHashIndex(string input);
		int calcNextPrimeNumberAfter(int size);
		void resizeAndRehash();

	public:
		// Constructor, with dynamically allocated hash table
		HashedTable(int size)
		{
			arraySize = calcNextPrimeNumberAfter(size);
			hashTable = new LinkedList<SchoolPtrContainer>[arraySize]; 
		}

		// Destructor
		~HashedTable();
		void addToTable(const SchoolPtrContainer& schoolPtr); 
		bool findSchool(const SchoolPtrContainer& search, SchoolPtrContainer& returnSchool);
        bool removeSchool(const SchoolPtrContainer& removed);
		void displayList();
		void printHashTable();
		void writeHashTable(string filename);
        void writeHashTable(ofstream& outfile, void visit(SchoolPtrContainer&, ofstream&) );
		int getTableSize();

		// The statistics functions
		double calcLoadFactor();
		int collisions();
		int amountLinkedLists();
		void longestLinkedList();
		double avgNumNodes();	

};

//*******************************************************
// Destructor											*
//*******************************************************

HashedTable::~HashedTable()
{
	for (int i = 0 ; i < arraySize; i++)
		hashTable[i].clear();  

    hashTable;
}

//*******************************************************
// Return the size of the array NOT the number of       *
// elements.                                            *
//*******************************************************

int HashedTable::getTableSize() 
{
	return arraySize;
}

//*******************************************************
// Given a size, check what is the next prime number    *
// after it. If the given size parameter is already a   *
// prime number then we do not need to find the next    *
// prime number.                                        *
//*******************************************************

int HashedTable::calcNextPrimeNumberAfter(int size)
{
	while (true) {
		bool isPrime = false;

		if (size < 2) {
			isPrime = false;
		}
		else {
			for (int i = 2; true; ++i) {
				int q = size / i;

				if (q < i) {
					isPrime = true;
					break;
				}

				if (size == q * i) {
					isPrime = false;
					break;
				}
			}
		}

		if (isPrime) {
			break;
		}

		size++;
	}

	return size;
}

//*******************************************************
// Resizing is doubling the array size and finding the  *
// closest prime number which will be used as the actual*
// size. The current elements are then re-hashed and    *
// into the new array discarding the old one.           *
//*******************************************************

void HashedTable::resizeAndRehash() 
{
	HashedTable newHashTable(arraySize * 2);

	for (int i = 0; i < arraySize; i++) {
		for (int j = 0; j < hashTable[i].getItemCount(); j++) {
			SchoolPtrContainer school;
			
			if (hashTable[i].getEntry(j, school)) {                
				newHashTable.addToTable(school);
            } 
		}
	}

	for (int i = 0; i < arraySize; i++)
		hashTable[i].clear();

	arraySize = newHashTable.arraySize;
	hashTable = newHashTable.hashTable;

    // Detach hashtable
    newHashTable.arraySize = 0;
    newHashTable.hashTable = NULL;
    // otherwise desctructor of newHashTable will destroy rehashed data
}

//*******************************************************
// The getHashIndex generates and returns a hash index	*
// for an item based on the key. This specific function	*
// cubes the ASCII value of each character, and then	*
// sums them. Then the function takes the modulus using *
// the defined hash table size, and returns the index.  *
//*******************************************************

int HashedTable::getHashIndex(string input)
{		
	int index = 0;
	int cube;

	for (size_t i = 0; i < input.length(); i++)
	{
		cube = static_cast<int>(pow(input[i], 3.0)); 
		index += cube;
	}
	
	if (index >= arraySize)
		index = index % arraySize;

	return index;
}

//*******************************************************
// The addToTable function uses the getHashIndex		*
// function to find which index to add into, and then	*
// calls the insert function from LinkedList.h to insert*
// into linked list. If the load factor reaches 75% then*
// The hash table expands                               *
//*******************************************************

void HashedTable::addToTable(const SchoolPtrContainer& schoolPtr)
{
	int index;	
	index = getHashIndex(schoolPtr.getSchool()->get_Code());
	hashTable[index].insert(schoolPtr);

	if (calcLoadFactor() >= LOAD_FACTOR)
		resizeAndRehash();
}

//*******************************************************
// The findFilm function calls getEntry function from	*
// LinkedList.h to see if item exists, and then returns *
// the item.											*
//*******************************************************

bool HashedTable::findSchool(const SchoolPtrContainer& search, SchoolPtrContainer& returnSchool)
{
    int index;	
	index = getHashIndex(search.getSchool()->get_Code());
	return hashTable[index].getEntry(search, returnSchool);
}

bool HashedTable::removeSchool(const SchoolPtrContainer& removed)
{
    int index;	
	index = getHashIndex(removed.getSchool()->get_Code());    
	return hashTable[index].remove(removed);
}

//*******************************************************
// The displayList function displays all of the items   *
// in the list, in the index order and including the	*
// collisions.											*
//*******************************************************

void HashedTable::displayList()
{
	for(int i = 0; i < arraySize; i++)
		hashTable[i].display();
}

//*******************************************************
// The printHashTable function prints all of the items  *
// in the hash table, including the word empty if the	*
// index is empty.										*
//*******************************************************

void HashedTable::printHashTable()
{
	for (int i = 0; i < arraySize; i++)
	{
		cout << "Index " << i << ": ";
		cout << hashTable[i].indentedList();
		cout << endl;
	}
}

//*******************************************************
// The writeHashTable function writes all of the items  *
// in the hash table into a file                        *
//*******************************************************

void HashedTable::writeHashTable(string filename)
{
	ofstream outFile;
	outFile.open(filename.c_str());

	for (int i = 0; i < arraySize; i++)
	{
		outFile << "Index " << i << ": ";
		outFile << hashTable[i].indentedList();
		outFile << endl;
	}

	outFile.close();
}

void HashedTable::writeHashTable(ofstream& outfile, void visit(SchoolPtrContainer&, ofstream&) )
{
	for (int i = 0; i < arraySize; i++)
	{
		for (int j = 0; j < hashTable[i].getItemCount(); j++)
		{
			SchoolPtrContainer school;
			
			if (hashTable[i].getEntry(j, school))
            {
                visit(school, outfile);
            }
		}	
	}
}

//*******************************************************
// The calcLoadFactor function returns the load factor  *
// of the hash table.									*
//*******************************************************

double HashedTable::calcLoadFactor()
{
	int counter = 0;
	double loadFactor;
	for (int i = 0; i < arraySize; i++)
	{
		if(hashTable[i].getItemCount() > 0)
			counter++;
	}
	loadFactor = static_cast<double>(counter) / arraySize * 100;
	return loadFactor;
}

//*******************************************************
// The numCollisions function returns the number of		*
// collisions the hash table experienced while adding	*
// in the the items.									*
//*******************************************************

int HashedTable::collisions()
{
	int numCollisions = 0;
	for (int i = 0; i < arraySize; i++)
	{
		if(hashTable[i].getItemCount() > 0)
			numCollisions += hashTable[i].getItemCount() - 1;
	}
	return numCollisions;
}

//*******************************************************
// The longestLinkedList function prints the linked		*
// lists with the largest amount of nodes.				*
//*******************************************************

void HashedTable::longestLinkedList()
{
	int longest = 0;
	
	for (int i = 0; i < arraySize; i++)
	{
		if(hashTable[i].getItemCount() > longest)
			longest = hashTable[i].getItemCount();
	}
	for (int i = 0; i < arraySize; i++)
	{
		if(hashTable[i].getItemCount() == longest)
		{
			cout << hashTable[i].indentedList();
			cout << endl;
		}
	}
}

//*******************************************************
// The numLinkedLists function returns the number of	*
// linked lists that experienced collisions.			*
//*******************************************************

int HashedTable::amountLinkedLists()
{
	int numLinkedLists = 0;
	
	for (int i = 0; i < arraySize; i++)
	{
		if(hashTable[i].getItemCount() > 1)
			numLinkedLists++;
	}
	return numLinkedLists;
}

//*******************************************************
// The avgNumNodes function returns the average number	*
// of nodes stored in linked lists.						*
//*******************************************************
double HashedTable::avgNumNodes()
{
	return (static_cast<double>(collisions())) / amountLinkedLists();
}

#endif
